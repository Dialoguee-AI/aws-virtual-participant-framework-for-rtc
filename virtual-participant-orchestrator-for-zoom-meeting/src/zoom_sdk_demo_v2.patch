diff --git a/x64/demo/sdk_demo_v2/CustomizedUIRecordMgr.cpp b/x64/demo/sdk_demo_v2/CustomizedUIRecordMgr.cpp
index f1401e2..51640eb 100644
--- a/x64/demo/sdk_demo_v2/CustomizedUIRecordMgr.cpp
+++ b/x64/demo/sdk_demo_v2/CustomizedUIRecordMgr.cpp
@@ -1,5 +1,9 @@
 #include "stdafx.h"
 #include "CustomizedUIRecordMgr.h"
+#include "ZoomSDKAudioRawDataDelegate.h"
+#include "rawdata/rawdata_audio_helper_interface.h"
+#include "zoom_sdk_raw_data_def.h"
+#include "rawdata/zoom_rawdata_api.h"
 
 CustomizedUIRecordMgr* CustomizedUIRecordMgr::s_recordMgrObj=NULL;
 
@@ -324,10 +328,22 @@ void CustomizedUIRecordMgr::onCloudRecordingStatus(ZOOM_SDK_NAMESPACE::Recording
 
 void CustomizedUIRecordMgr::onRecordPriviligeChanged(bool bCanRec)
 {
-	if (bCanRec)
-		::MessageBox(NULL, _T("you can record now."),     _T("winsdk demo"), MB_OK);
-	else 
+	if (bCanRec) {
+		auto recordingController = SDKInterfaceWrap::GetInst().GetMeetingService()->GetMeetingRecordingController();
+
+		if (recordingController->CanStartRecording(false, 0) == ZOOMSDK::SDKError::SDKERR_SUCCESS) {
+			if (recordingController->StartRawRecording() == ZOOMSDK::SDKError::SDKERR_SUCCESS) {
+				ZoomSDKAudioRawDataDelegate *customDelegate;
+				//Todo fix potential memory leak
+				customDelegate = new ZoomSDKAudioRawDataDelegate();
+				ZOOM_SDK_NAMESPACE::IZoomSDKAudioRawDataHelper* helper = ZOOM_SDK_NAMESPACE::GetAudioRawdataHelper();
+				helper->subscribe(customDelegate);
+			}
+		}
+	}
+	else {
 		::MessageBox(NULL, _T("you can not record now."), _T("winsdk demo"), MB_OK);
+	}
 }
 
 void CustomizedUIRecordMgr::onCustomizedLocalRecordingSourceNotification(ZOOM_SDK_NAMESPACE::ICustomizedLocalRecordingLayoutHelper* layout_helper)
diff --git a/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.cpp b/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.cpp
index 26becd9..baf5b84 100644
--- a/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.cpp
+++ b/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.cpp
@@ -3,6 +3,9 @@
 #include <stdarg.h>
 #include "auth_service_interface.h"
 #include "mess_info.h"
+#include <codecvt>
+#include "SNSService.h"
+
 
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //class CSDKLoginWithSSOUIGroup 
@@ -191,6 +194,8 @@ void CSDKWithoutLoginStartJoinMeetingUIGroup::DoWithoutLoginStartJoinMeetingBtnC
 	std::wstring MeetingPassword = m_editMeetingPassword->GetText().GetData();
 	std::wstring ScreenName = m_editScreenName->GetText().GetData();
 	withoutloginParam.meetingNumber = _wtoi64(MeetingNumber.c_str());
+	if (withoutloginParam.meetingNumber == 0)
+		return;
 	withoutloginParam.vanityID = NULL;
 	withoutloginParam.userName = ScreenName.c_str();
 	withoutloginParam.psw = MeetingPassword.c_str();
@@ -243,53 +248,98 @@ void CSDKWithoutLoginStartJoinMeetingUIGroup::DoWithoutLoginStartJoinMeetingBtnC
 
 void CSDKWithoutLoginStartJoinMeetingUIGroup::onMeetingStatusChanged(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult)
 {
+	//Todo: better handling of notification and m_bInMeeting to help orchestrator decide whether
+	// 1/ bot has or is joining a meeting and is occupied, 2/ bot is free to be assigned 3/ unexpected error
+	auto sns_topic_arn = std::getenv("SNS_TOPIC_ARN");
+
 	switch (status)
 	{
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_RECONNECTING:
 		if (SDKInterfaceWrap::GetInst().IsSelectCustomizedUIMode())
 		{
 			CSDKDemoAppEvent* pAppEvent = m_parentFrame->GetAppEvent();
-			if(pAppEvent)
+			if (pAppEvent)
 				pAppEvent->InitCustomizedUI();
 		}
+	//	m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_RECONNECTING");
 		break;
+
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_CONNECTING:
+	//	m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_CONNECTING");
+		break;
+
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_DISCONNECTING:
+	//	m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_DISCONNECTING");
 		break;
+
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_ENDED:
+		if (m_parentFrame)
 		{
-			if(m_parentFrame)
-			{
-				m_parentFrame->GetAppEvent()->onJoinFailed();
-				m_parentFrame->SetCurrentPage(m_WithoutLoginStartJoinMeetingPage);
-			}
-
+			// todo: maybe sns should get a failed
+			m_parentFrame->GetAppEvent()->onJoinFailed();
+			m_parentFrame->SetCurrentPage(m_WithoutLoginStartJoinMeetingPage);
 		}
+		m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_ENDED");
 		break;
+
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_FAILED:
+		if (m_parentFrame)
 		{
-			if(m_parentFrame)
-			{
-				m_parentFrame->SetCurrentPage(m_WithoutLoginStartJoinMeetingPage);
+			m_parentFrame->SetCurrentPage(m_WithoutLoginStartJoinMeetingPage);
 
-				TCHAR szError[128] = { 0 };
-				swprintf_s(szError,128, _T("Join meeting failed, error_code = %d"), iResult);
-				m_parentFrame->ShowErrorMessage(szError);
-			}
+			TCHAR szError[128] = { 0 };
+			swprintf_s(szError, 128, _T("Join meeting failed, error_code = %d\n"), iResult);
+			m_parentFrame->ShowErrorMessage(szError);
 		}
+		m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, (char*)std::to_string(iResult).c_str());
 		break;
+
 	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_INMEETING:
+		if (m_parentFrame)
 		{
-			if(m_parentFrame)
-			{
-				m_parentFrame->GetAppEvent()->onShowLoggedInUI(Demo_Meeting_Join_Only);
-			}
+			m_parentFrame->GetAppEvent()->onShowLoggedInUI(Demo_Meeting_Join_Only);
 		}
+		m_bInMeeting = true;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_INMEETING");
+		break;
+
+	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_IN_WAITING_ROOM:
+	//	m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_IN_WAITING_ROOM");
+		break;
+
+	case ZOOM_SDK_NAMESPACE::MEETING_STATUS_WAITINGFORHOST:
+	//	m_bInMeeting = false;
+		PublishSNSMessage(sns_topic_arn, "MEETING_STATUS_WAITINGFORHOST");
+		break;
+
 	default:
 		break;
+
 	}
 }
 
+void CSDKWithoutLoginStartJoinMeetingUIGroup::PublishSNSMessage(char* sns_topic_arn, char* message)
+{
+	if (sns_topic_arn == NULL || strlen(sns_topic_arn) < 1)
+	{
+		std::cout << "SNS Topic ARN cannot be empty string or NULL" << std::endl;
+		return;
+	}
+	if (message != NULL && strlen(message) < 1) {
+		std::cout << "SNS message cannot be empty string or NULL" << std::endl;
+		return;
+	}
+	std::shared_ptr<SNSService> sns = sns->instance();
+	sns->Publish(sns_topic_arn, message);
+
+}
+
 //////////////////////////////////////////////////////////////////////////////////////////////
 //class CSDKRestAPIUserUIGroup 
 CSDKRestAPIUserUIGroup::CSDKRestAPIUserUIGroup()
@@ -562,12 +612,43 @@ void CSDKLoginUIMgr::InitWindow()
 	m_restApi_login_page = static_cast<CVerticalLayoutUI* >(m_PaintManager.FindControl(L"panel_RestAPI_Without_Login"));
 	m_only_join_page = static_cast<CVerticalLayoutUI* >(m_PaintManager.FindControl(L"panel_Join_Meeting_Only"));
 
-	m_currentPage = m_sso_login_page;
+	m_currentPage = m_only_join_page;
 	SwitchToWaitingPage(L"", false);
-	SwitchToPage(login_UseSSO_Page);
+	SwitchToPage(login_JoinMeetingOnly_Page);
 	m_LoginCBHandler.SetUIEvent(this);
 }
 
+bool CSDKLoginUIMgr::attemptJoin(string meeting_id, string meeting_passcode, string display_name)
+{
+	std::unique_lock<std::mutex> lock(join_meeting_mutex);
+	std::cout << "&&^&** ===== " << (m_WithoutLoginStartJoinMeetingUIGroup.m_bInMeeting ? "IN MEETING" : "not in meeting");
+
+	if (m_WithoutLoginStartJoinMeetingUIGroup.m_bInMeeting ||
+		NULL == m_WithoutLoginStartJoinMeetingUIGroup.m_editMeetingNumber ||
+		NULL == m_WithoutLoginStartJoinMeetingUIGroup.m_editMeetingPassword ||
+		NULL == m_WithoutLoginStartJoinMeetingUIGroup.m_editScreenName ||
+		meeting_id.length() < 1 || meeting_passcode.length() < 1 || display_name.length() < 1)
+		return false;
+
+	std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> widener;
+	auto wmeeting_id = widener.from_bytes(meeting_id);
+	auto wmeeting_passcode = widener.from_bytes(meeting_passcode);
+	auto wdisplay_name = widener.from_bytes(display_name);
+
+	// todo: consider below if the right window is not showing
+	// SwitchToPage(login_JoinMeetingOnly_Page);
+
+	//todo: DO better way to attempt join than via UI manipulation
+
+	m_WithoutLoginStartJoinMeetingUIGroup.m_editMeetingNumber->SetText((LPCTSTR)wmeeting_id.c_str());
+	m_WithoutLoginStartJoinMeetingUIGroup.m_editMeetingPassword->SetText((LPCTSTR)wmeeting_passcode.c_str());
+	m_WithoutLoginStartJoinMeetingUIGroup.m_editScreenName->SetText((LPCTSTR)wdisplay_name.c_str());
+
+	m_WithoutLoginStartJoinMeetingUIGroup.DoWithoutLoginStartJoinMeetingBtnClick();
+	return true;
+
+}
+
 void CSDKLoginUIMgr::Notify(TNotifyUI& msg)
 {
 	if(msg.sType == _T("click"))
@@ -684,7 +765,12 @@ void CSDKLoginUIMgr::SwitchToWaitingPage(const wchar_t* waiting_message, bool sh
 void CSDKLoginUIMgr::ShowErrorMessage(const wchar_t* error_message)
 {
 	if (error_message)
-		::MessageBox(NULL, error_message, L"error", MB_OK);
+	{
+		// Todo better logging
+		std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> narrower;
+		std::cout << "error: " << narrower.to_bytes(error_message);
+	//	::MessageBox(NULL, error_message, L"error", MB_OK);
+	}
 }
 
 void CSDKLoginUIMgr::SwitchToPage(loginTabPage nPage)
@@ -751,7 +837,7 @@ void CSDKLoginUIMgr::NotifyAuthDone()
 void CSDKLoginUIMgr::SwitchToPage(SwitchToLoginUIType type_)
 {
    if(SwitchToLoginUIType_AUTHDONE == type_)
-      SwitchToPage(login_UseSSO_Page);
+      SwitchToPage(login_JoinMeetingOnly_Page);
 }
 
 void CSDKLoginUIMgr::CleanUp()
@@ -780,8 +866,13 @@ void CSDKLoginCBHandler::SetUIEvent(CSDKLoginUIMgr* main_frame_)
 
 void CSDKLoginCBHandler::onLoginReturnWithReason(ZOOM_SDK_NAMESPACE::LOGINSTATUS ret, ZOOM_SDK_NAMESPACE::IAccountInfo* pAccountInfo, ZOOM_SDK_NAMESPACE::LoginFailReason reason)
 {
+	std::cout << "LOGIN RESULT" << endl;
+	std::cout << ret << endl;
+	std::cout << reason << endl;
+
 	if (ZOOM_SDK_NAMESPACE::LOGIN_SUCCESS == ret)
 	{
+		std::cout << "LOGIN SUCCESS" << endl;
 		TCHAR szlog[MAX_PATH] = {0};
 		swprintf_s(szlog, MAX_PATH,_T("userName:%s\r\nloggin success"),pAccountInfo->GetDisplayName());
 		OutputDebugString(szlog);
@@ -792,7 +883,7 @@ void CSDKLoginCBHandler::onLoginReturnWithReason(ZOOM_SDK_NAMESPACE::LOGINSTATUS
 	}
 	if (ZOOM_SDK_NAMESPACE::LOGIN_FAILED == ret)
 	{
-
+		std::cout << "LOGIN FAILED" << endl;
 		if(m_parentFrame && m_parentFrame->GetAppEvent())
 		{
 			m_parentFrame->GetAppEvent()->onLoginFailed();
diff --git a/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.h b/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.h
index e965598..086af05 100644
--- a/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.h
+++ b/x64/demo/sdk_demo_v2/LOGIN_sdk_login_UI.h
@@ -6,6 +6,8 @@
 #include "LOGIN_join_meeting_only_workflow.h"
 #include "LOGIN_restapi_without_login_workflow.h"
 #include "sdk_demo_app_common.h"
+#include <string>
+#include <mutex>
 /////////////////////////
 enum loginTabPage
 {
@@ -71,16 +73,22 @@ public:
 	virtual void onMeetingStatusChanged(ZOOM_SDK_NAMESPACE::MeetingStatus status, int iResult = 0);
 	virtual void onMeetingStatisticsWarningNotification(ZOOM_SDK_NAMESPACE::StatisticsWarningType type) {};
 	virtual void onMeetingParameterNotification(const ZOOM_SDK_NAMESPACE::MeetingParameter* meeting_param) {};
+
+	//todo, setting these text fields as a data binding breaks abstractions!
+public:
+	CRichEditUI* m_editMeetingNumber;
+	CRichEditUI* m_editScreenName;
+	CRichEditUI* m_editMeetingPassword;
+	std::atomic<bool> m_bInMeeting;
   
 protected:
 	CVerticalLayoutUI* m_WithoutLoginStartJoinMeetingPage;
-	CRichEditUI*	   m_editMeetingNumber;
-	CRichEditUI*	   m_editScreenName;
-	CRichEditUI*	   m_editMeetingPassword;
 	CButtonUI*		   m_btnJoin;
 	CSDKLoginUIMgr*	   m_parentFrame;
 	CSDKWithoutLoginStartJoinMeetingFlow  m_withoutLoginJoinMeetingWorkFlow;
-	bool m_bInMeeting;
+
+private:
+	void PublishSNSMessage(char* sns_topic_arn, char* message);
 };
 
 class CSDKRestAPIUserUIGroup : public CSDKRestAPIUserUIEvent
@@ -125,6 +133,11 @@ public:
 	virtual ~CSDKLoginUIMgr();
 
 	void SetEvent(CSDKDemoAppEvent* pAppEvent);
+
+public:
+	bool attemptJoin(string meeting_id, string meeting_passcode, string display_name);
+	std::mutex join_meeting_mutex;
+
 public:
 	virtual LPCTSTR		GetWindowClassName() const   {   return _T("zSDKDemoUI");  }
 	UINT GetClassStyle() const { return UI_CLASSSTYLE_FRAME | CS_DBLCLKS ; };
diff --git a/x64/demo/sdk_demo_v2/SNSService.cpp b/x64/demo/sdk_demo_v2/SNSService.cpp
new file mode 100644
index 0000000..bc8c4e7
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/SNSService.cpp
@@ -0,0 +1,93 @@
+// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
+// Licensed under the Amazon Software License  http://aws.amazon.com/asl/
+
+#include "stdafx.h"
+#include "SNSService.h"
+
+SNSService::SNSService() {
+    sns = Aws::MakeShared<Aws::SNS::SNSClient>("SNS_ALLOCATION_TAG");
+}
+
+
+bool SNSService::CreateTopic(Aws::String topic_name, Aws::String& topic_arn) {
+
+    Aws::SNS::Model::CreateTopicRequest ct_req;
+    ct_req.SetName(topic_name);
+
+    auto ct_out = sns->CreateTopic(ct_req);
+    if (ct_out.IsSuccess())
+    {
+        std::cout << "Successfully created topic " << topic_name << std::endl;
+        topic_arn = ct_out.GetResult().GetTopicArn();
+        return true;
+    }
+    else
+    {
+        std::cout << "Error creating topic " << topic_name << ": " <<
+            ct_out.GetError().GetMessage() << std::endl;
+        return false;
+    }
+
+}
+
+bool SNSService::SubscribeEndpoint(Aws::String topic_arn, Aws::String protocol, Aws::String endpoint) {
+
+    Aws::SNS::Model::SubscribeRequest s_req;
+    s_req.SetTopicArn(topic_arn);
+    s_req.SetProtocol(protocol);
+    s_req.SetEndpoint(endpoint);
+
+    auto s_out = sns->Subscribe(s_req);
+
+    if (s_out.IsSuccess())
+    {
+        std::cout << "Successfully subscribed to topic " << topic_arn << std::endl;
+        return true;
+    }
+    else
+    {
+        std::cout << "Error subscribing to topic " << topic_arn << ": " <<
+            s_out.GetError().GetMessage() << std::endl;
+        return false;
+    }
+}
+
+bool SNSService::Publish(Aws::String topic_arn, Aws::String message)
+{
+    Aws::SNS::Model::PublishRequest psms_req;
+    psms_req.SetMessage(message);
+    psms_req.SetTopicArn(topic_arn);
+
+    auto psms_out = sns->Publish(psms_req);
+
+    if (psms_out.IsSuccess())
+    {
+        std::cout << "Message published successfully to topic " << topic_arn << std::endl;
+        return true;
+    }
+    else
+    {
+        std::cout << "Error while publishing message to topic " << topic_arn << psms_out.GetError().GetMessage()
+            << std::endl;
+        return false;
+    }
+}
+
+bool SNSService::DeleteTopic(Aws::String topic_arn) {
+
+    Aws::SNS::Model::DeleteTopicRequest dt_req;
+    dt_req.SetTopicArn(topic_arn);
+
+    auto dt_out = sns->DeleteTopic(dt_req);
+    if (dt_out.IsSuccess())
+    {
+        std::cout << "Successfully deleted topic " << topic_arn << std::endl;
+        return true;
+    }
+    else {
+        std::cout << "Error deleting topic " << topic_arn << ": " <<
+            dt_out.GetError().GetMessage() << std::endl;
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/x64/demo/sdk_demo_v2/SNSService.h b/x64/demo/sdk_demo_v2/SNSService.h
new file mode 100644
index 0000000..d74e1aa
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/SNSService.h
@@ -0,0 +1,37 @@
+// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
+// Licensed under the Amazon Software License  http://aws.amazon.com/asl/
+
+#pragma once
+#include "stdafx.h"
+#include <aws/core/Aws.h>
+#include <aws/sns/SNSClient.h>
+#include <aws/sns/model/CreateTopicRequest.h>
+#include <aws/sns/model/DeleteTopicRequest.h>
+#include <aws/sns/model/CreateTopicResult.h>
+#include <aws/sns/model/DeleteTopicRequest.h>
+#include <aws/sns/model/SubscribeResult.h>
+#include <aws/sns/model/SubscribeRequest.h>
+#include <aws/sns/model/PublishRequest.h>
+#include <aws/sns/model/PublishResult.h>
+
+class SNSService
+{
+public:
+	SNSService(SNSService const&) = delete;
+	SNSService& operator=(SNSService const&) = delete;
+
+	static std::shared_ptr<SNSService> instance() {
+		static std::shared_ptr<SNSService> s{ new SNSService };
+		return s;
+	}
+
+	std::shared_ptr<Aws::SNS::SNSClient> sns;
+
+	bool SNSService::CreateTopic(Aws::String topic_name, Aws::String& topic_arn);
+	bool DeleteTopic(Aws::String topic_arn);
+	bool SubscribeEndpoint(Aws::String topic_arn, Aws::String protocol, Aws::String endpoint);
+	bool Publish(Aws::String topic_arn, Aws::String message);
+private:
+	SNSService();
+};
diff --git a/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.cpp b/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.cpp
new file mode 100644
index 0000000..7c218d7
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.cpp
@@ -0,0 +1,167 @@
+#include "stdafx.h"
+#include "ZoomSDKAudioRawDataDelegate.h"
+
+
+
+using namespace std;
+using namespace ZOOM_SDK_NAMESPACE;
+
+ZoomSDKAudioRawDataDelegate::ZoomSDKAudioRawDataDelegate()
+{
+    GstCaps *caps;
+    GstAudioInfo info;
+    char const *access_key, *secret_key, *aws_region, *stream_name;
+
+    // to do error checking for empty env
+    // TODO: subscribe a callback to capture errors
+    access_key = std::getenv("AWS_ACCESS_KEY_ID");
+    secret_key = std::getenv("AWS_SECRET_ACCESS_KEY");
+    aws_region = std::getenv("AWS_DEFAULT_REGION");
+
+    auto kvs_stream_suffix = std::getenv("KVS_STREAM_SUFFIX");
+    std::ostringstream stream_name_ostream;
+    stream_name_ostream << "zoom-meeting";
+
+    ZOOM_SDK_NAMESPACE::IMeetingService* meeting_service = SDKInterfaceWrap::GetInst().GetMeetingService();
+    if (meeting_service != NULL && meeting_service->GetMeetingInfo())
+        stream_name_ostream << '-' << meeting_service->GetMeetingInfo()->GetMeetingNumber();
+
+    if (kvs_stream_suffix != NULL && strlen(kvs_stream_suffix) > 0)
+        stream_name_ostream << '-' << kvs_stream_suffix;
+
+    //stream name must be less than 256 bits
+    kvs_stream_name = stream_name_ostream.str().substr(0, 256);
+
+    stream_name = kvs_stream_name.c_str();
+
+    /* Initialize custom data structure */
+    memset(&data, 0, sizeof(data));
+
+    /* Initialize GStreamer */
+    gst_init(NULL, NULL);
+
+    /* Create the elements */
+    data.appsrc = gst_element_factory_make("appsrc", "appsrc");
+    data.audiotestsrc = gst_element_factory_make("audiotestsrc", "audiotestsrc");
+    data.audioconvert = gst_element_factory_make("audioconvert", "audioconvert");
+    data.audio_queue1 = gst_element_factory_make("queue", "audio_queue1");
+ //   data.audioenc = gst_element_factory_make("voaacenc", "audioenc");
+    data.audioenc = gst_element_factory_make("mulawenc", "audioenc");
+
+  /* video elements not in use for this audio-only sample delegate*/
+  //  data.videotestsrc = gst_element_factory_make("videotestsrc", "videotestsrc");
+  //  data.src_filter = gst_element_factory_make("capsfilter", "src_filter");
+  //  data.video_queue = gst_element_factory_make("queue", "video_queue");
+  //  data.x264enc = gst_element_factory_make("x264enc", "x264enc");
+  //  data.h264parse = gst_element_factory_make("h264parse", "h264parse");
+
+    data.sink = gst_element_factory_make("kvssink", "sink");
+
+    /* Create the empty pipeline */
+    data.pipeline = gst_pipeline_new("kvs-bot-pipeline");
+
+    if (!data.pipeline || !data.appsrc || !data.audiotestsrc || !data.audioconvert ||  !data.audio_queue1  || !data.audioenc ||
+        /* !data.videotestsrc ||  !data.video_queue || !data.x264enc || !data.h264parse || */
+        !data.sink)
+    {
+        g_printerr("Not all elements could be created.\n");
+    }
+
+    /* Configure appsrc */
+    gst_audio_info_set_format(&info, GST_AUDIO_FORMAT_S16, ZOOM_MEETING_AUDIO_SAMPLE_RATE, 1, NULL);
+    caps = gst_audio_info_to_caps(&info);
+    g_object_set(data.appsrc, "caps", caps, "format", GST_FORMAT_TIME, NULL);
+    gst_caps_unref(caps);
+
+    /* Build the pipeline */
+    gst_bin_add_many(GST_BIN(data.pipeline), data.appsrc, data.audio_queue1, data.audioconvert, data.audioenc,
+        /* data.videotestsrc, data.src_filter, data.video_queue, data.x264enc, data.h264parse, */
+        data.sink, NULL);
+
+    /* convert pcm to aac for defult DASH playback (needs video) or mulaw for transcription*/
+   if (!gst_element_link_many(data.appsrc, data.audio_queue1, data.audioconvert, data.audioenc, data.sink, NULL))
+    {
+        g_printerr("Audio elements could not be linked.\n");
+        gst_object_unref(data.pipeline);
+    }
+
+    /* Modify sink */
+    g_object_set(data.sink, "fragment-duration", 5000, NULL);
+    g_object_set(data.sink, "stream-name", stream_name, NULL);
+    g_object_set(data.sink, "access-key", access_key, NULL);
+    g_object_set(data.sink, "secret-key", secret_key, NULL);
+    g_object_set(data.sink, "aws-region", aws_region, NULL);
+
+    /* Modify audio queue 1 - purpose is to create new thread, delay not important */
+    g_object_set(data.audio_queue1, "max-size-time", 10 * GST_USECOND, NULL);
+
+
+    /* Video elements example */
+
+    /* if (!gst_element_link_many( data.videotestsrc, data.src_filter, data.video_queue, data.x264enc, data.h264parse, data.sink, NULL))
+     {
+     g_printerr("Video elements could not be linked.\n");
+     gst_object_unref(data.pipeline);
+    }*/
+
+    /* Modify videotestsrc */
+    //g_object_set(data.videotestsrc, "pattern", 2, NULL);
+
+    /* Modify src_filter */
+   /* caps = gst_caps_new_simple("video/x-raw",
+                               "width", G_TYPE_INT, 16,
+                               "height", G_TYPE_INT, 16,
+                               "framerate", GST_TYPE_FRACTION, 30, 1,
+                                "format", "I420",
+                                NULL);
+    g_object_set(data.src_filter, "caps", caps, NULL);
+    gst_caps_unref(caps);*/
+
+    /* Modify x264enc */
+  //  g_object_set(data.x264enc, "tune", 0x00000004, NULL);
+
+    /* Modify video queue */
+    //g_object_set(data.video_queue, "max-size-time", 10 * GST_USECOND, NULL);
+
+
+
+
+    /* Start playing the pipeline to capture audio */
+    gst_element_set_state(data.pipeline, GST_STATE_PLAYING);
+}
+
+void ZoomSDKAudioRawDataDelegate::onMixedAudioRawDataReceived(AudioRawData *data_)
+{
+
+    GstBuffer *buffer;
+    gint num_samples = data_->GetBufferLen() / 2; /* Because each sample is 16 bits */
+
+    /* Create a new empty buffer */
+    buffer = gst_buffer_new_and_alloc(data_->GetBufferLen());
+
+    /* Set its timestamp and duration */
+    GST_BUFFER_TIMESTAMP(buffer) = gst_util_uint64_scale(data.num_samples, GST_SECOND, data_->GetSampleRate());
+    GST_BUFFER_DURATION(buffer) = gst_util_uint64_scale(num_samples, GST_SECOND, data_->GetSampleRate());
+
+    /* inject a keyframe every 250 ms to start new fragment */
+    if (msecond_counter >= 250)
+    {
+        msecond_counter = 0;
+        GST_BUFFER_FLAG_SET(buffer, GST_BUFFER_FLAG_DELTA_UNIT);
+    }
+    msecond_counter += buffer->duration / GST_MSECOND;
+
+    gst_buffer_fill(buffer, 0, data_->GetBuffer(), data_->GetBufferLen());
+
+    data.num_samples += num_samples;
+
+    /* Push the buffer into the appsrc */
+    gst_app_src_push_buffer((GstAppSrc *)data.appsrc, gst_buffer_ref(buffer));
+
+    /* Free the buffer now that we are done with it */
+    gst_buffer_unref(buffer);
+}
+
+void ZoomSDKAudioRawDataDelegate::onOneWayAudioRawDataReceived(AudioRawData *data_, uint32_t node_id)
+{
+}
diff --git a/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.h b/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.h
new file mode 100644
index 0000000..5c63a71
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/ZoomSDKAudioRawDataDelegate.h
@@ -0,0 +1,41 @@
+#pragma once
+#include "stdafx.h"
+#include "zoom_sdk.h"
+#include "rawdata/rawdata_audio_helper_interface.h"
+#include "zoom_sdk_raw_data_def.h"
+
+
+#ifndef ZOOM_MEETING_AUDIO_SAMPLE_RATE
+#define ZOOM_MEETING_AUDIO_SAMPLE_RATE 32000 /* Samples per second we are sending */
+#endif
+
+/* Structure to contain all our information, so we can pass it to callbacks */
+typedef struct _CustomData
+{
+    /*Audio elements*/
+    GstElement* pipeline, * appsrc, * audio_queue1, * audiotestsrc, * audioconvert, * audioenc;
+
+    /*Sink element -> KVS Sink*/
+    GstElement* sink;
+
+    /* Dropping support for video for now * /
+    //GstElement* videotestsrc, * src_filter, * video_queue, * x264enc, * h264parse;
+
+    /* Number of samples generated so far (for timestamp generation) */
+    guint64 num_samples;
+} CustomData;
+
+class ZoomSDKAudioRawDataDelegate : public ZOOM_SDK_NAMESPACE::IZoomSDKAudioRawDataDelegate {
+private:
+    CustomData data;
+    std::string kvs_stream_name;
+    std::atomic<gint64> msecond_counter;
+
+
+public:
+    ZoomSDKAudioRawDataDelegate();
+    virtual void onMixedAudioRawDataReceived(AudioRawData* data_) override;
+
+    // Inherited via IZoomSDKAudioRawDataDelegate
+    virtual void onOneWayAudioRawDataReceived(AudioRawData* data_, uint32_t node_id) override;
+};
\ No newline at end of file
diff --git a/x64/demo/sdk_demo_v2/err.txt b/x64/demo/sdk_demo_v2/err.txt
new file mode 100644
index 0000000..e69de29
diff --git a/x64/demo/sdk_demo_v2/gui_output_to_console.cpp b/x64/demo/sdk_demo_v2/gui_output_to_console.cpp
new file mode 100644
index 0000000..c5cc877
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/gui_output_to_console.cpp
@@ -0,0 +1,82 @@
+#include "stdafx.h"
+#include "gui_output_to_console.h"
+
+
+// Redirect stdin to CONIN$ and stedout and stderr CONOUT$
+bool GUIOutputToConsole::RedirectSTDIOToConsole()
+{
+    bool streams_redirected_to_console = true;
+    FILE* stream;
+
+    if (GetStdHandle(STD_INPUT_HANDLE) != INVALID_HANDLE_VALUE)
+        if (0 == freopen_s(&stream, "CONIN$", "r", stdin))
+            setvbuf(stdin, NULL, _IONBF, 0);
+        else
+            streams_redirected_to_console = false;
+
+    if (GetStdHandle(STD_OUTPUT_HANDLE) != INVALID_HANDLE_VALUE)
+        if (0 == freopen_s(&stream, "CONOUT$", "w", stdout))
+            setvbuf(stdout, NULL, _IONBF, 0);
+        else
+            streams_redirected_to_console = false;
+
+    if (GetStdHandle(STD_ERROR_HANDLE) != INVALID_HANDLE_VALUE)
+        if (0 == freopen_s(&stream, "CONOUT$", "w", stderr))
+            setvbuf(stderr, NULL, _IONBF, 0);
+        else
+            streams_redirected_to_console = false;
+
+    // sync C++ standard streams with console
+    std::ios::sync_with_stdio(true);
+
+    // Clear state for each of the standar io and err streams
+    std::wcout.clear();
+    std::cout.clear();
+    std::wcerr.clear();
+    std::cerr.clear();
+    std::wcin.clear();
+    std::cin.clear();
+
+    return streams_redirected_to_console;
+}
+
+
+bool GUIOutputToConsole::LaunchDebugConsole()
+{
+    bool success = false;
+    ReleaseDebugConsole();
+    if (AllocConsole())
+        success = GUIOutputToConsole::RedirectSTDIOToConsole();
+
+    std::wstring name =  L"Debug Console";
+    SetConsoleTitle(name.c_str());
+    return success;
+}
+
+// Redirect standard IO and err to NUL before freeing console
+bool GUIOutputToConsole::ReleaseDebugConsole()
+{
+    bool streams_redirected_to_null = true;
+    FILE* stream;
+
+    if (0 != freopen_s(&stream, "NUL:", "r", stdin))
+        streams_redirected_to_null = false;
+    else
+        setvbuf(stdin, NULL, _IONBF, 0);
+
+    if (0 != freopen_s(&stream, "NUL:", "w", stdout))
+        streams_redirected_to_null = false;
+    else
+        setvbuf(stdout, NULL, _IONBF, 0);
+
+    if (0 != freopen_s(&stream, "NUL:", "w", stderr))
+        streams_redirected_to_null = false;
+    else
+        setvbuf(stderr, NULL, _IONBF, 0);
+
+    // Detach process from console
+    bool process_detached = FreeConsole();
+
+
+    return streams_redirected_to_null && process_detached;
+}
diff --git a/x64/demo/sdk_demo_v2/gui_output_to_console.h b/x64/demo/sdk_demo_v2/gui_output_to_console.h
new file mode 100644
index 0000000..034bea2
--- /dev/null
+++ b/x64/demo/sdk_demo_v2/gui_output_to_console.h
@@ -0,0 +1,13 @@
+#pragma once
+
+
+typedef struct GUIOutputToConsole
+{
+private:
+	static bool RedirectSTDIOToConsole();
+
+public:
+	static bool LaunchDebugConsole();
+	static bool ReleaseDebugConsole();
+
+} GUIOutputToConsole;
diff --git a/x64/demo/sdk_demo_v2/output.txt b/x64/demo/sdk_demo_v2/output.txt
new file mode 100644
index 0000000..e69de29
diff --git a/x64/demo/sdk_demo_v2/sdk_demo_app.cpp b/x64/demo/sdk_demo_v2/sdk_demo_app.cpp
index d6d7dcc..ff80f12 100644
--- a/x64/demo/sdk_demo_v2/sdk_demo_app.cpp
+++ b/x64/demo/sdk_demo_v2/sdk_demo_app.cpp
@@ -2,10 +2,23 @@
 #include "sdk_demo_app.h"
 #include "display_cc_ui.h"
 
+#include "gui_output_to_console.h"
+
 CSDKDemoApp g_demoApp;
 
 void CSDKDemoApp::Run(HINSTANCE hInstance)
 {
+	// if (GUIOutputToConsole::LaunchDebugConsole())
+	// {
+	// 	std::cout << "Debug Console Attached..." << std::endl;
+	// }
+
+	freopen("output.txt", "w", stdout);
+	freopen("err.txt", "w", stderr);
+
+	Aws::InitAPI(options);
+	SetRoutesAndStartServer(3000);
+
 	CPaintManagerUI::SetInstance(hInstance);
 
 	m_sdk_init_auth_ui = new CSDKInitAuthUIMgr();
@@ -13,7 +26,7 @@ void CSDKDemoApp::Run(HINSTANCE hInstance)
 		return;
 
 	m_sdk_login_ui_mgr = new CSDKLoginUIMgr();
-	if(!m_sdk_login_ui_mgr)
+	if (!m_sdk_login_ui_mgr)
 		return;
 
 	m_sdk_init_auth_ui->SetEvent(this);
@@ -34,27 +47,120 @@ void CSDKDemoApp::Run(HINSTANCE hInstance)
 	//#define WND_STYLE (WS_POPUPWINDOW | WS_CAPTION | WS_DLGFRAME | WS_CLIPSIBLINGS | WS_CLIPCHILDREN)
 	//p->Create(NULL, _T("test"), WND_STYLE, WS_EX_WINDOWEDGE|WS_EX_LAYERED);
 	//p->ShowWindow(true);
+}
+
+void CSDKDemoApp::SetRoutesAndStartServer(int port)
+{
+	CROW_ROUTE(crow_app, "/")([]()
+		{
+			const std::string responseString = "Hello Bot!";
+			CROW_LOG_INFO << "Response String: " << responseString;
+			return responseString;
+		});
+
 
+	// todo: move these somewhere cleaner
+	CROW_ROUTE(crow_app, "/join")
+		.methods("POST"_method)([=](const crow::request& req)
+			{
+				ZOOM_SDK_NAMESPACE::IAuthService* auth_service = SDKInterfaceWrap::GetInst().GetAuthService();
+				if (auth_service == NULL || auth_service->GetAuthResult() != ZOOM_SDK_NAMESPACE::AUTHRET_SUCCESS)
+				{
+					CROW_LOG_WARNING << "SDK is not authenticated yet";
+					return crow::response(crow::status::SERVICE_UNAVAILABLE);
+				}
+				if (m_sdk_login_ui_mgr == NULL)
+				{
+					CROW_LOG_WARNING << "Login Page Not Yet loaded cannot join or rejoin";
+					return crow::response(crow::status::SERVICE_UNAVAILABLE);
+				}
+				auto reqJson = crow::json::load(req.body);
+				if (!reqJson) {
+					CROW_LOG_WARNING << "Invalid /Join request data: " << req.body;
+					return crow::response(crow::status::BAD_REQUEST);
+				}
+
+				std::string meeting_id = reqJson["meeting_id"].s();
+				std::string meeting_passcode = reqJson["meeting_passcode"].s();
+				std::string bot_display_name = reqJson["bot_display_name"].s();
+
+				// todo: better error handling particularly meeting_id/Meeting_passcode not being numerical
+				auto attempt_success = m_sdk_login_ui_mgr->attemptJoin(meeting_id, meeting_passcode, bot_display_name);
+
+				if (!attempt_success)
+				{
+					CROW_LOG_WARNING << "Already in Meeing or Invalid /Join query data: " << req.body;
+					return crow::response(crow::status::BAD_REQUEST);
+				}
+
+				CROW_LOG_INFO << "attempt /Join : " << req.body;
+				return crow::response("attempt meeting join!");
+			});
+
+
+	CROW_ROUTE(crow_app, "/leave")
+		.methods("POST"_method)([]()
+			{
+				ZOOM_SDK_NAMESPACE::IAuthService* auth_service = SDKInterfaceWrap::GetInst().GetAuthService();
+				if (auth_service == NULL || auth_service->GetAuthResult() != ZOOM_SDK_NAMESPACE::AUTHRET_SUCCESS)
+				{
+					CROW_LOG_WARNING << "SDK is not authenticated yet";
+					return crow::response(crow::status::SERVICE_UNAVAILABLE);
+				}
+				ZOOM_SDK_NAMESPACE::IMeetingService* meeting_service = SDKInterfaceWrap::GetInst().GetMeetingService();
+				if (meeting_service == NULL || meeting_service->Leave(ZOOM_SDK_NAMESPACE::LEAVE_MEETING) != ZOOM_SDK_NAMESPACE::SDKERR_SUCCESS)
+				{
+					CROW_LOG_WARNING << "Could not leave - likely not in meeting";
+					return crow::response(crow::status::SERVICE_UNAVAILABLE);
+				}
+				const std::string responseString = "leaving!";
+				CROW_LOG_INFO << "Response String: " << responseString;
+
+				return crow::response("leave meeting invoked");
+			});
+
+	CROW_ROUTE(crow_app, "/health")([]()
+		{
+			const std::string responseString = "Healthy";
+			CROW_LOG_INFO << "Response String: " << responseString;
+			return responseString; ;
+		});
+
+	//Todo: enable TLS
+	crow_thread = std::move(std::thread([=]()
+		{
+			crow_app.port(3000)
+				.loglevel(crow::LogLevel::Info)
+				//		.multithreaded()  // this is not a high volume web server this could simplify threading
+				.run();
+		}));
 
 }
 
 void CSDKDemoApp::Stop()
 {
+	crow_app.stop();
+	if (crow_thread.joinable())
+	{
+		crow_thread.join();
+	}
+	Aws::ShutdownAPI(options);
+
 	if (m_sdk_init_auth_ui)
 	{
 		::PostMessage(m_sdk_init_auth_ui->GetHWND(), WM_DESTROY, 0, 0);
 	}
-	if(m_sdk_login_ui_mgr)
+	if (m_sdk_login_ui_mgr)
 	{
 		::PostMessage(m_sdk_login_ui_mgr->GetHWND(), WM_DESTROY, 0, 0);
 	}
 	if (m_sdk_loggedIn_ui_mgr)
 	{
-		::PostMessage(m_sdk_loggedIn_ui_mgr->GetHWND(),WM_DESTROY, 0, 0);
+		::PostMessage(m_sdk_loggedIn_ui_mgr->GetHWND(), WM_DESTROY, 0, 0);
 	}
-	if(m_sdk_settings_ui_mgr)
+	if (m_sdk_settings_ui_mgr)
 	{
-		::PostMessage(m_sdk_settings_ui_mgr->GetHWND(),WM_DESTROY, 0, 0);
+		::PostMessage(m_sdk_settings_ui_mgr->GetHWND(), WM_DESTROY, 0, 0);
 	}
 	if (m_sdk_join_meeting_for_login_user_ui_mgr)
 	{
@@ -64,6 +170,7 @@ void CSDKDemoApp::Stop()
 }
 
 CSDKDemoApp::CSDKDemoApp()
+	: crow_thread()
 {
 	m_sdk_init_auth_ui = NULL;
 	m_sdk_login_ui_mgr = NULL;
@@ -72,6 +179,7 @@ CSDKDemoApp::CSDKDemoApp()
 	m_sdk_join_meeting_for_login_user_ui_mgr = NULL;
 	m_customizedMeetingUI = NULL;
 	m_more_menu_ui = NULL;
+
 }
 
 CSDKDemoApp::~CSDKDemoApp()
@@ -116,35 +224,38 @@ void CSDKDemoApp::Cleanup()
 		delete m_sdk_join_meeting_for_login_user_ui_mgr;
 		m_sdk_join_meeting_for_login_user_ui_mgr = NULL;
 	}
+#ifdef ENABLE_ZOOM_DEBUG_CONSOLE
+	GUIOutputToConsole::ReleaseDebugConsole();
+#endif
 }
 
 void CSDKDemoApp::onSwitchToLoginUI(SwitchToLoginUIType type_)
 {
 	//hide no use ui and show login ui
-	CRect rc(0,0,0,0);
+	CRect rc(0, 0, 0, 0);
 	HWND hwndUI(NULL);
 	if (m_sdk_init_auth_ui)
 	{
 		hwndUI = m_sdk_init_auth_ui->GetHWND();
-		if(NULL != hwndUI)
+		if (NULL != hwndUI)
 			::GetWindowRect(hwndUI, &rc);
 		m_sdk_init_auth_ui->ShowWindow(false);
 	}
-	
-	if(m_sdk_loggedIn_ui_mgr)
+
+	if (m_sdk_loggedIn_ui_mgr)
 	{
 		hwndUI = m_sdk_loggedIn_ui_mgr->GetHWND();
-		if(NULL != hwndUI)
+		if (NULL != hwndUI)
 			::GetWindowRect(hwndUI, &rc);
-		m_sdk_loggedIn_ui_mgr->ShowWindow(false);								   
+		m_sdk_loggedIn_ui_mgr->ShowWindow(false);
 	}
 
 	if (m_sdk_login_ui_mgr)
 	{
 		hwndUI = m_sdk_login_ui_mgr->GetHWND();
-		m_sdk_login_ui_mgr->SwitchToWaitingPage(L"",false);
+		m_sdk_login_ui_mgr->SwitchToWaitingPage(L"", false);
 
-        m_sdk_login_ui_mgr->SwitchToPage(type_);
+		m_sdk_login_ui_mgr->SwitchToPage(type_);
 
 		m_sdk_login_ui_mgr->ShowWindow(true);
 		ActiveWindowToTop(hwndUI);
@@ -153,10 +264,10 @@ void CSDKDemoApp::onSwitchToLoginUI(SwitchToLoginUIType type_)
 	if (m_sdk_settings_ui_mgr)
 	{
 		hwndUI = m_sdk_settings_ui_mgr->GetHWND();
-		if(NULL != hwndUI)
+		if (NULL != hwndUI)
 		{
 			DestroyWindow(hwndUI);
-		    m_sdk_settings_ui_mgr = NULL;
+			m_sdk_settings_ui_mgr = NULL;
 		}
 	}
 
@@ -169,21 +280,21 @@ void CSDKDemoApp::onSwitchToLoginUI(SwitchToLoginUIType type_)
 	switch (type_)
 	{
 	case SwitchToLoginUIType_AUTHDONE:
+	{
+		if (m_sdk_login_ui_mgr)
 		{
-			if (m_sdk_login_ui_mgr)
-			{
-				m_sdk_login_ui_mgr->NotifyAuthDone();
-			}
+			m_sdk_login_ui_mgr->NotifyAuthDone();
 		}
-		break;
+	}
+	break;
 	case SwitchToLoginUIType_LOGOUT:
+	{
+		if (m_sdk_login_ui_mgr)
 		{
-			if (m_sdk_login_ui_mgr)
-			{
-				m_sdk_login_ui_mgr->LogOut();
-			}
+			m_sdk_login_ui_mgr->LogOut();
 		}
-		break;
+	}
+	break;
 	case SwitchToLoginUIType_MeetingEND:
 	case SwitchToLoginUIType_LOGINFAILED:
 	case SwitchToLoginUIType_MEETINGFAILED:
@@ -196,7 +307,7 @@ void CSDKDemoApp::onSwitchToLoginUI(SwitchToLoginUIType type_)
 void CSDKDemoApp::onShowLoggedInUI(LoggedIn_MeetingUI_type nType_)
 {
 	//first to delete the old instance if there is any
-	if(m_sdk_loggedIn_ui_mgr)
+	if (m_sdk_loggedIn_ui_mgr)
 	{
 		DestroyWindow(m_sdk_loggedIn_ui_mgr->GetHWND());
 		//delete m_sdk_loggedIn_ui_mgr;
@@ -204,25 +315,25 @@ void CSDKDemoApp::onShowLoggedInUI(LoggedIn_MeetingUI_type nType_)
 	}
 
 	m_sdk_loggedIn_ui_mgr = new CSDKLoggedInUIMgr();
-	if(NULL == m_sdk_loggedIn_ui_mgr)
+	if (NULL == m_sdk_loggedIn_ui_mgr)
 		return;
 
 	m_sdk_loggedIn_ui_mgr->SetEvent(this);
 	m_sdk_loggedIn_ui_mgr->Create(NULL, _T("Windows app using zoom win sdk"), UI_WNDSTYLE_DIALOG, WS_EX_WINDOWEDGE);
 	m_sdk_loggedIn_ui_mgr->SetIcon(IDI_ICON_LOGO);
 
-	CRect rc(0,0,0,0);
+	CRect rc(0, 0, 0, 0);
 	HWND hwndUI(NULL);
 	hwndUI = m_sdk_login_ui_mgr->GetHWND();
-	if(NULL != hwndUI)
+	if (NULL != hwndUI)
 		::GetWindowRect(m_sdk_login_ui_mgr->GetHWND(), &rc);
 	hwndUI = m_sdk_loggedIn_ui_mgr->GetHWND();
-	if(rc.Height() != 0 && rc.Width() != 0 && NULL != hwndUI)
-		::MoveWindow(hwndUI,rc.left,rc.top,rc.Width(),rc.Height(),FALSE);
+	if (rc.Height() != 0 && rc.Width() != 0 && NULL != hwndUI)
+		::MoveWindow(hwndUI, rc.left, rc.top, rc.Width(), rc.Height(), FALSE);
 
 	m_sdk_loggedIn_ui_mgr->ShowUI(nType_);
 
-	if(m_sdk_login_ui_mgr)
+	if (m_sdk_login_ui_mgr)
 	{
 		if (Demo_Really_LoggedIn == nType_)
 		{
@@ -233,37 +344,37 @@ void CSDKDemoApp::onShowLoggedInUI(LoggedIn_MeetingUI_type nType_)
 }
 void CSDKDemoApp::onShowSettingsUI(SettingsUI_page nPage)
 {
-	if(m_sdk_settings_ui_mgr)
+	if (m_sdk_settings_ui_mgr)
 	{
 		DestroyWindow(m_sdk_settings_ui_mgr->GetHWND());
 		m_sdk_settings_ui_mgr = NULL;
 	}
 	m_sdk_settings_ui_mgr = new CSDKSettingsUIMgr();
-	if(NULL == m_sdk_settings_ui_mgr)
+	if (NULL == m_sdk_settings_ui_mgr)
 	{
 		return;
 	}
 
 	//m_sdk_settings_ui_mgr->SetEvent(this);
-	m_sdk_settings_ui_mgr->Create(NULL,_T("Settings"),UI_WNDSTYLE_DIALOG, WS_EX_WINDOWEDGE);
+	m_sdk_settings_ui_mgr->Create(NULL, _T("Settings"), UI_WNDSTYLE_DIALOG, WS_EX_WINDOWEDGE);
 	m_sdk_settings_ui_mgr->SetIcon(IDI_ICON_LOGO);
 	m_sdk_settings_ui_mgr->SwitchToPage(nPage);
 
 }
 void CSDKDemoApp::onSwitchToJoinMeetingForLoginUserUI()
 {
-	if(m_sdk_join_meeting_for_login_user_ui_mgr)
+	if (m_sdk_join_meeting_for_login_user_ui_mgr)
 	{
 		DestroyWindow(m_sdk_join_meeting_for_login_user_ui_mgr->GetHWND());
 		m_sdk_join_meeting_for_login_user_ui_mgr = NULL;
 	}
 	m_sdk_join_meeting_for_login_user_ui_mgr = new CSDKJoinMeetingForLoginUserUIMgr();
-	if(NULL == m_sdk_join_meeting_for_login_user_ui_mgr)
+	if (NULL == m_sdk_join_meeting_for_login_user_ui_mgr)
 	{
 		return;
 	}
 	m_sdk_join_meeting_for_login_user_ui_mgr->SetEvent(this);
-	m_sdk_join_meeting_for_login_user_ui_mgr->Create(NULL,_T("Join meeting"),UI_WNDSTYLE_DIALOG, WS_EX_WINDOWEDGE);
+	m_sdk_join_meeting_for_login_user_ui_mgr->Create(NULL, _T("Join meeting"), UI_WNDSTYLE_DIALOG, WS_EX_WINDOWEDGE);
 	m_sdk_join_meeting_for_login_user_ui_mgr->SetIcon(IDI_ICON_LOGO);
 	m_sdk_join_meeting_for_login_user_ui_mgr->ShowWindow(true);
 }
@@ -284,25 +395,25 @@ void CSDKDemoApp::onLoginFailed()
 
 void CSDKDemoApp::onJoinFailed()
 {
- 	onSwitchToLoginUI(SwitchToLoginUIType_MEETINGFAILED);
-	if(m_sdk_loggedIn_ui_mgr)
+	onSwitchToLoginUI(SwitchToLoginUIType_MEETINGFAILED);
+	if (m_sdk_loggedIn_ui_mgr)
 	{
 		m_sdk_loggedIn_ui_mgr->ShowWindow(false);
 	}
- 	if (m_sdk_login_ui_mgr)
- 	{
+	if (m_sdk_login_ui_mgr)
+	{
 		m_sdk_login_ui_mgr->ChangeUIforJoinFailed();
- 	}
+	}
 }
 
 void CSDKDemoApp::InitCustomizedUI()
 {
 	if (SDKInterfaceWrap::GetInst().IsSelectCustomizedUIMode())
 	{
-		if(NULL == m_customizedMeetingUI)
+		if (NULL == m_customizedMeetingUI)
 		{
 			m_customizedMeetingUI = new CCustomizeInMeetingUIMgr();
-			if(m_customizedMeetingUI)
+			if (m_customizedMeetingUI)
 				m_customizedMeetingUI->SetEvent(this);
 		}
 		else
@@ -315,7 +426,7 @@ void CSDKDemoApp::InitCustomizedUI()
 
 void CSDKDemoApp::ActivateCustomizedUI()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ActivateUI();
 	}
@@ -324,7 +435,7 @@ void CSDKDemoApp::ActivateCustomizedUI()
 
 void CSDKDemoApp::onShowChatWindow()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ShowHideChatWindow();
 	}
@@ -332,7 +443,7 @@ void CSDKDemoApp::onShowChatWindow()
 
 void CSDKDemoApp::onShowCameraControlWindow()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ShowHideCameraControlWindow();
 	}
@@ -340,7 +451,7 @@ void CSDKDemoApp::onShowCameraControlWindow()
 
 void CSDKDemoApp::onShowShareWindow()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ShowShareWindow();
 	}
@@ -348,7 +459,7 @@ void CSDKDemoApp::onShowShareWindow()
 
 void CSDKDemoApp::onShowGalleryViewWindow()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ShowHideGalleryViewWindow();
 	}
@@ -356,14 +467,14 @@ void CSDKDemoApp::onShowGalleryViewWindow()
 
 void CSDKDemoApp::onShowParticipantWindow()
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->ShowHideParticipantWindow();
 	}
 }
 void CSDKDemoApp::onPageButtonClick(ArrowButtonType btnType)
 {
-	if(m_customizedMeetingUI)
+	if (m_customizedMeetingUI)
 	{
 		m_customizedMeetingUI->PageButtonClick(btnType);
 	}
diff --git a/x64/demo/sdk_demo_v2/sdk_demo_app.h b/x64/demo/sdk_demo_v2/sdk_demo_app.h
index aac728b..160009d 100644
--- a/x64/demo/sdk_demo_v2/sdk_demo_app.h
+++ b/x64/demo/sdk_demo_v2/sdk_demo_app.h
@@ -9,6 +9,10 @@
 #include "Join_meeting_for_login_user_ui.h"
 #include "custom_ui_mgr.h"
 #include "more_menu_ui.h"
+#include <aws/core/Aws.h>
+#include <thread>
+
+
 class CSDKDemoApp : public CSDKDemoAppEvent
 {
 public:
@@ -19,14 +23,14 @@ public:
 	void Stop();
 	void Cleanup();
 	virtual void onSwitchToLoginUI(SwitchToLoginUIType type_);
-	virtual void onShowLoggedInUI(LoggedIn_MeetingUI_type nType_= Demo_Really_LoggedIn);
+	virtual void onShowLoggedInUI(LoggedIn_MeetingUI_type nType_ = Demo_Really_LoggedIn);
 	virtual void onQuitApp();
 	virtual void onLoginFailed();
 	virtual void onJoinFailed();
 	virtual void onShowSettingsUI(SettingsUI_page nPage = Setting_General_Page);
 	virtual void onSwitchToJoinMeetingForLoginUserUI();
-	virtual void InitCustomizedUI(); 
-	virtual void ActivateCustomizedUI();	
+	virtual void InitCustomizedUI();
+	virtual void ActivateCustomizedUI();
 	virtual void onShowChatWindow();
 	virtual void onShowShareWindow();
 	virtual void onShowGalleryViewWindow();
@@ -47,6 +51,11 @@ private:
 	CSDKJoinMeetingForLoginUserUIMgr* m_sdk_join_meeting_for_login_user_ui_mgr;
 	CCustomizeInMeetingUIMgr* m_customizedMeetingUI;
 	CMoreMenuUIMgr* m_more_menu_ui;
+
+	Aws::SDKOptions options;
+	void SetRoutesAndStartServer(int port);
+	std::thread crow_thread;
+	crow::SimpleApp crow_app;
 };
 
 extern CSDKDemoApp g_demoApp;
\ No newline at end of file
diff --git a/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj b/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj
index 06538ed..73e407a 100644
--- a/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj
+++ b/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj
@@ -83,12 +83,16 @@
     <IntDir>$(Configuration)\</IntDir>
     <LinkIncremental>false</LinkIncremental>
     <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
+    <IncludePath>C:\opt\zoom-sdk-windows-5.11.1.6653\zoom-sdk-windows-5.11.1.6653\x64\h;$(IncludePath)</IncludePath>
+    <LibraryPath>C:\opt\zoom-sdk-windows-5.11.1.6653\zoom-sdk-windows-5.11.1.6653\x64\lib;$(LibraryPath)</LibraryPath>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
     <OutDir>..\..\bin\</OutDir>
     <IntDir>$(Configuration)\</IntDir>
     <LinkIncremental>false</LinkIncremental>
     <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
+    <IncludePath>C:\opt\zoom-sdk-windows-5.11.1.6653\zoom-sdk-windows-5.11.1.6653\x64\h;$(IncludePath)</IncludePath>
+    <LibraryPath>C:\opt\zoom-sdk-windows-5.11.1.6653\zoom-sdk-windows-5.11.1.6653\x64\lib;$(LibraryPath)</LibraryPath>
   </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
     <ClCompile>
@@ -100,11 +104,14 @@
       <PrecompiledHeader>Use</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
+      <AdditionalIncludeDirectories>C:\gstreamer\1.0\msvc_x86_64\lib\glib-2.0\include;C:\gstreamer\1.0\msvc_x86_64\include\gstreamer-1.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0\glib;..\DuiLib\include;..\..\h;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
     </ClCompile>
     <Link>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <SubSystem>Windows</SubSystem>
       <TargetMachine>MachineX86</TargetMachine>
+      <AdditionalLibraryDirectories>..\..\lib;..\duilib\lib;C:\gstreamer\1.0\msvc_x86_64\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <AdditionalDependencies>gobject-2.0.lib;glib-2.0.lib;gstreamer-1.0.lib;gstaudio-1.0.lib;%(AdditionalDependencies)</AdditionalDependencies>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
@@ -120,11 +127,14 @@
       <PrecompiledHeader>Use</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <AdditionalIncludeDirectories>C:\gstreamer\1.0\msvc_x86_64\lib\glib-2.0\include;C:\gstreamer\1.0\msvc_x86_64\include\gstreamer-1.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0\glib;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
     </ClCompile>
     <Link>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <SubSystem>Windows</SubSystem>
       <TargetMachine>MachineX64</TargetMachine>
+      <AdditionalLibraryDirectories>C:\gstreamer\1.0\msvc_x86_64\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <AdditionalDependencies>gobject-2.0.lib;glib-2.0.lib;gstreamer-1.0.lib;%(AdditionalDependencies)</AdditionalDependencies>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
@@ -132,7 +142,7 @@
       <Optimization>Disabled</Optimization>
       <IntrinsicFunctions>true</IntrinsicFunctions>
       <WholeProgramOptimization>false</WholeProgramOptimization>
-      <AdditionalIncludeDirectories>..\DuiLib\include;..\..\h;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <AdditionalIncludeDirectories>C:\gstreamer\1.0\msvc_x86_64\lib\glib-2.0\include;C:\gstreamer\1.0\msvc_x86_64\include\gstreamer-1.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0\glib;..\DuiLib\include;..\..\h;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;UILIB_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <FunctionLevelLinking>true</FunctionLevelLinking>
@@ -141,9 +151,9 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>DuiLib.lib;sdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>gobject-2.0.lib;glib-2.0.lib;gstreamer-1.0.lib;gstaudio-1.0.lib;DuiLib.lib;sdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <OutputFile>..\..\bin\$(ProjectName).exe</OutputFile>
-      <AdditionalLibraryDirectories>..\..\lib;..\duilib\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <AdditionalLibraryDirectories>C:\gstreamer\1.0\msvc_x86_64\lib;..\..\lib;..\duilib\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <GenerateMapFile>true</GenerateMapFile>
       <SubSystem>Windows</SubSystem>
@@ -160,8 +170,8 @@
       <Optimization>Disabled</Optimization>
       <IntrinsicFunctions>true</IntrinsicFunctions>
       <WholeProgramOptimization>false</WholeProgramOptimization>
-      <AdditionalIncludeDirectories>..\DuiLib\include;..\..\h;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;UILIB_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <AdditionalIncludeDirectories>C:\gstreamer\1.0\msvc_x86_64\lib\glib-2.0\include;C:\gstreamer\1.0\msvc_x86_64\include\gstreamer-1.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0;C:\gstreamer\1.0\msvc_x86_64\include\glib-2.0\glib;..\DuiLib\include;..\..\h;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>ENABLE_ZOOM_DEBUG_CONSOLE;WIN32;NDEBUG;_WINDOWS;UILIB_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <FunctionLevelLinking>true</FunctionLevelLinking>
       <PrecompiledHeader>Use</PrecompiledHeader>
@@ -169,9 +179,9 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
     </ClCompile>
     <Link>
-      <AdditionalDependencies>DuiLib64.lib;sdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>gobject-2.0.lib;glib-2.0.lib;gstreamer-1.0.lib;gstaudio-1.0.lib;gstapp-1.0.lib;DuiLib64.lib;sdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <OutputFile>..\..\bin\$(ProjectName).exe</OutputFile>
-      <AdditionalLibraryDirectories>..\..\lib;..\duilib\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <AdditionalLibraryDirectories>C:\gstreamer\1.0\msvc_x86_64\lib;..\..\lib;..\duilib\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <GenerateMapFile>true</GenerateMapFile>
       <SubSystem>Windows</SubSystem>
@@ -201,6 +211,7 @@
     <ClCompile Include="custom_ui_video_flow.cpp" />
     <ClCompile Include="custom_ui_video_mgr.cpp" />
     <ClCompile Include="display_cc_ui.cpp" />
+    <ClCompile Include="gui_output_to_console.cpp" />
     <ClCompile Include="init_auth_sdk_workflow.cpp" />
     <ClCompile Include="invitation_ui.cpp" />
     <ClCompile Include="invitation_workflow.cpp" />
@@ -233,6 +244,7 @@
     <ClCompile Include="SETTINGS_video_workflow.cpp" />
     <ClCompile Include="SETTINGS_virtualBG_workflow.cpp" />
     <ClCompile Include="ShareToolbarWindow.cpp" />
+    <ClCompile Include="SNSService.cpp" />
     <ClCompile Include="stdafx.cpp">
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>
@@ -245,6 +257,7 @@
     <ClCompile Include="user_manager.cpp" />
     <ClCompile Include="util_window.cpp" />
     <ClCompile Include="ViewOptionsWindow.cpp" />
+    <ClCompile Include="ZoomSDKAudioRawDataDelegate.cpp" />
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="AnnotateBarWindow.h" />
@@ -268,6 +281,7 @@
     <ClInclude Include="custom_ui_video_flow.h" />
     <ClInclude Include="custom_ui_video_mgr.h" />
     <ClInclude Include="display_cc_ui.h" />
+    <ClInclude Include="gui_output_to_console.h" />
     <ClInclude Include="init_auth_sdk_workflow.h" />
     <ClInclude Include="invitation_ui.h" />
     <ClInclude Include="invitation_workflow.h" />
@@ -301,6 +315,7 @@
     <ClInclude Include="SETTINGS_video_workflow.h" />
     <ClInclude Include="SETTINGS_virtualBG_workflow.h" />
     <ClInclude Include="ShareToolbarWindow.h" />
+    <ClInclude Include="SNSService.h" />
     <ClInclude Include="stdafx.h" />
     <ClInclude Include="targetver.h" />
     <ClInclude Include="toolbar_bottom_ui.h" />
@@ -309,6 +324,7 @@
     <ClInclude Include="user_manager.h" />
     <ClInclude Include="util_window.h" />
     <ClInclude Include="ViewOptionsWindow.h" />
+    <ClInclude Include="ZoomSDKAudioRawDataDelegate.h" />
   </ItemGroup>
   <ItemGroup>
     <ResourceCompile Include="sdk_demo_v2.rc" />
diff --git a/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj.filters b/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj.filters
index 11ea1aa..eeda16a 100644
--- a/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj.filters
+++ b/x64/demo/sdk_demo_v2/sdk_demo_v2.vcxproj.filters
@@ -315,6 +315,15 @@
     <ClCompile Include="join_webinar_wnd_ui.cpp">
       <Filter>Source Files\3_how_to_start_join_meeting\4_webinar_register_join_meeting</Filter>
     </ClCompile>
+    <ClCompile Include="ZoomSDKAudioRawDataDelegate.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="gui_output_to_console.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="SNSService.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="sdk_demo_app.h">
@@ -503,6 +512,15 @@
     <ClInclude Include="join_webinar_wnd_ui.h">
       <Filter>Source Files\3_how_to_start_join_meeting\4_webinar_register_join_meeting</Filter>
     </ClInclude>
+    <ClInclude Include="ZoomSDKAudioRawDataDelegate.h">
+      <Filter>Source Files</Filter>
+    </ClInclude>
+    <ClInclude Include="gui_output_to_console.h">
+      <Filter>Source Files</Filter>
+    </ClInclude>
+    <ClInclude Include="SNSService.h">
+      <Filter>Source Files</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <ResourceCompile Include="sdk_demo_v2.rc">
diff --git a/x64/demo/sdk_demo_v2/sdk_init_auth_ui.cpp b/x64/demo/sdk_demo_v2/sdk_init_auth_ui.cpp
index 239280e..f9f97e4 100644
--- a/x64/demo/sdk_demo_v2/sdk_init_auth_ui.cpp
+++ b/x64/demo/sdk_demo_v2/sdk_init_auth_ui.cpp
@@ -1,6 +1,8 @@
 #include "stdafx.h"
 #include "sdk_init_auth_ui.h"
 #include "mess_info.h"
+#include <codecvt>
+
 CInitSDKUIGroup::CInitSDKUIGroup()
 {
 	m_InitSDKPage = NULL;
@@ -38,6 +40,8 @@ void CInitSDKUIGroup::Show()
 		{
 			m_mainFrame->SetCurrentPage(m_InitSDKPage);
 		}
+		m_chkCustomizedUI->SetCheck(true);
+		DoInitBtnClick();
 	}
 }
 void CInitSDKUIGroup::Hide()
@@ -78,7 +82,9 @@ void CInitSDKUIGroup::DoInitBtnClick()
 		initParam.hResInstance = GetModuleHandle(NULL);
 		initParam.enableLogByDefault = true;
 		initParam.enableGenerateDump = true;
-		bool customiezed_ui_mode = false;
+
+		// enable customized UI by default
+		bool customiezed_ui_mode = true;
 		if (m_chkCustomizedUI)
 			customiezed_ui_mode = m_chkCustomizedUI->GetCheck();
 		if (customiezed_ui_mode)
@@ -145,6 +151,7 @@ void CAuthSDKUIGroup::UninitWindow()
 
 void CAuthSDKUIGroup::Show()
 {
+	using namespace jwt::params;
 	if (m_AuthSDKPage)
 	{
 		m_AuthSDKPage->SetVisible(true);
@@ -152,6 +159,48 @@ void CAuthSDKUIGroup::Show()
 		{
 			m_mainFrame->SetCurrentPage(m_AuthSDKPage);
 		}
+
+		std::wstring generated_token;
+
+		auto key_chars = std::getenv("ZOOM_APP_KEY");
+		auto secret_chars = std::getenv("ZOOM_APP_SECRET");
+
+		std::cout << key_chars << endl;
+		std::cout << secret_chars << endl;
+
+		if (key_chars != NULL && secret_chars != NULL && strlen(key_chars) > 0 && strlen(secret_chars) > 0)
+		{
+			auto zoom_app_key = std::string(key_chars);
+			auto zoom_app_secret = std::string(secret_chars);
+			auto now = std::chrono::system_clock::now();
+			auto expirey = now + std::chrono::hours{ 48 } - std::chrono::minutes{ 1 };
+
+			jwt::jwt_object obj{
+				algorithm("HS256"),
+				payload({{"appKey", zoom_app_key}}),
+				secret(zoom_app_secret)
+			};
+
+			obj.add_claim("iat", now)
+				.add_claim("exp", expirey)
+				.add_claim("tokenExp", expirey);
+
+			auto zoom_jwt_token = obj.signature();
+			std::cout << zoom_jwt_token << endl;
+			std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> widener;
+			generated_token = widener.from_bytes(zoom_jwt_token);
+
+			//TODO: add proper logging framework to detect issues like bad tokens
+			auto decoded = jwt::decode(zoom_jwt_token, algorithms({ "HS256" }), secret(zoom_app_secret));
+			std::cout << decoded.header() << std::endl;
+			std::cout << decoded.payload() << std::endl;
+
+		}
+		if (NULL != m_editSDKJWTToken && !generated_token.empty())
+		{
+			m_editSDKJWTToken->SetText((LPCTSTR)generated_token.c_str());
+			DoAuthBtnClick();
+		}
 	}
 }
 
@@ -176,9 +225,10 @@ void CAuthSDKUIGroup::Notify( TNotifyUI& msg )
 
 void CAuthSDKUIGroup::DoAuthBtnClick()
 {
-	if(NULL == m_editSDKJWTToken)
+	if (NULL == m_editSDKJWTToken)
 		return;
 	std::wstring strToken = m_editSDKJWTToken->GetText().GetData();
+
 	if (strToken.size() > 0 )
 	{
 		ZOOM_SDK_NAMESPACE::AuthContext param;
@@ -187,10 +237,12 @@ void CAuthSDKUIGroup::DoAuthBtnClick()
 		{
 			if (m_mainFrame)
 				m_mainFrame->ShowErrorMessage(L"auth sdk failed");
+				std::cout << "auth sdk failed" << endl;
 		}
 		else
 		{
 			m_mainFrame->SwitchToWaitingPage(L"waiting auth result...", true);
+			std::cout << "waiting auth result..." << endl;
 		}
 	}
 }
@@ -202,10 +254,12 @@ void CAuthSDKUIGroup::onSDKAuthed(ZOOM_SDK_NAMESPACE::AuthResult ret)
 		m_mainFrame->SwitchToWaitingPage(NULL, false);
 		if (ZOOM_SDK_NAMESPACE::AUTHRET_SUCCESS != ret)
 		{
+			std::cout << "Auth Error" << endl;
 			m_mainFrame->ShowErrorMessage(CSDKMessInfo::GetInst().GetErrorMessInfo());
 		}
 		else if (m_mainFrame->GetAppEvent())
 		{
+			std::cout << "Auth Success" << endl;
 			m_mainFrame->GetAppEvent()->onSwitchToLoginUI(SwitchToLoginUIType_AUTHDONE);
 		}
 	}
diff --git a/x64/demo/sdk_demo_v2/stdafx.h b/x64/demo/sdk_demo_v2/stdafx.h
index 00f4af5..1d29c7d 100644
--- a/x64/demo/sdk_demo_v2/stdafx.h
+++ b/x64/demo/sdk_demo_v2/stdafx.h
@@ -8,6 +8,8 @@
 #include "targetver.h"
 
 //#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
+#include <winsock2.h>
+
 // Windows Header Files:
 #include <windows.h>
 
@@ -20,3 +22,13 @@
 #include "UIlib.h"
 using namespace DuiLib;
 // TODO: reference additional headers your program requires here
+#include <crow.h>
+#include <stdint.h>
+#include <gst/gst.h>
+#include <gst/audio/audio.h>
+#include <gst/app/gstappsrc.h>
+#include <queue>
+#include "sdk_util.h"
+#undef min
+#undef max
+#include "jwt/jwt.hpp"
diff --git a/x64/h/meeting_service_interface.h b/x64/h/meeting_service_interface.h
index 86be3b2..bec3a94 100644
--- a/x64/h/meeting_service_interface.h
+++ b/x64/h/meeting_service_interface.h
@@ -141,6 +141,7 @@ typedef struct tagJoinParam4WithoutLogin
 	bool		   isDirectShareDesktop;///<Share the desktop directly or not. True indicates to Share.
 	bool		   isVideoOff;///<Turn off the video of not. True indicates to turn off. In addition, this flag is affected by meeting attributes.
 	bool		   isAudioOff;///<Turn off the audio or not. True indicates to turn off. In addition, this flag is affected by meeting attributes.
+	const wchar_t* join_token;///<join token.
 }JoinParam4WithoutLogin;
 
 /*! \struct tagJoinParam4NormalUser
diff --git a/x64/h/rawdata/rawdata_share_source_helper_interface.h b/x64/h/rawdata/rawdata_share_source_helper_interface.h
new file mode 100644
index 0000000..889e59c
--- /dev/null
+++ b/x64/h/rawdata/rawdata_share_source_helper_interface.h
@@ -0,0 +1,30 @@
+#ifndef _RAWDATA_SHARE_SOURCE_HELPER_INTERFACE_H_
+#define _RAWDATA_SHARE_SOURCE_HELPER_INTERFACE_H_
+#include "zoom_sdk_def.h"
+
+BEGIN_ZOOM_SDK_NAMESPACE
+
+class IZoomSDKShareSender
+{
+public:
+	virtual ~IZoomSDKShareSender() {}
+	virtual SDKError sendShareFrame(char* frameBuffer, int width, int height, int frameLength) = 0;
+};
+
+class IZoomSDKShareSource
+{
+public:
+	virtual ~IZoomSDKShareSource() {}
+	virtual void onStartSend(IZoomSDKShareSender* pSender) = 0;
+	virtual void onStopSend() = 0;
+};
+
+class IZoomSDKShareSourceHelper
+{
+public:
+	virtual ~IZoomSDKShareSourceHelper() {}
+	virtual SDKError setExternalShareSource(IZoomSDKShareSource* pShareSource) = 0;
+};
+
+END_ZOOM_SDK_NAMESPACE
+#endif
\ No newline at end of file
